---
# tasks file for win-jenkins-node-jnlp

- name: "install openjdk{{ jenkins_node_openjdk_major_version }} {{ jenkins_node_openjdk_full_version }}"
  chocolatey.chocolatey.win_chocolatey:
    name: "openjdk{{ jenkins_node_openjdk_major_version }}"
    state: present
    version: "{{ jenkins_node_openjdk_full_version }}"
    pinned: yes
    allow_multiple: yes
  register: openjdk
  when: jenkins_node_openjdk_full_version != "latest"

- name: install openjdk{{ jenkins_node_openjdk_major_version }} latest
  chocolatey.chocolatey.win_chocolatey:
    name: openjdk{{ jenkins_node_openjdk_major_version }}
    state: latest
  register: openjdk
  when: jenkins_node_openjdk_full_version == "latest"

- name: reboot
  # A reboot is immediately required if openjdk changed so JAVA_HOME is available.
  ansible.windows.win_reboot:
  when: openjdk.changed

- name: apply the provided cert
  block:
    - name: check the java keystore for the cert
      ansible.windows.win_shell: "bin\\keytool -list -storepass changeit -alias {{ jenkins_node_master_ca_cert | win_basename }} -keystore lib\\security\\cacerts"
      args:
        executable: cmd
        chdir: "%JAVA_HOME%"
      ignore_errors: yes
      register: check_java_keystore

    - name: install the cert in the java store
      ansible.windows.win_shell: "bin\\keytool -import -storepass changeit -noprompt -trustcacerts -alias {{ jenkins_node_master_ca_cert | win_basename }} -file {{ jenkins_node_master_ca_cert }} -keystore lib\\security\\cacerts"
      args:
        executable: cmd
        chdir: "%JAVA_HOME%"
      when: check_java_keystore.rc != 0
  when: jenkins_node_master_ca_cert is defined

- name: create folder for workspaces
  ansible.windows.win_file:
    path: "{{ jenkins_node_path }}"
    state: directory

- name: download the agent jar
  ansible.windows.win_get_url:
    url: https://slcjenkins.us.fdo/jnlpJars/agent.jar
    dest: "{{ jenkins_node_path }}\\agent.jar"
    force: yes
  register: result_download_agent_jar

- name: install python-jenkins
  # The pip module isn't supported on Windows yet. Sigh...
  ansible.windows.win_shell: pip install --upgrade python-jenkins

- name: copy node creation script
  ansible.windows.win_copy:
    src: files/create_jenkins_node_jnlp.py
    dest: "{{ jenkins_node_path }}\\create_jenkins_node_jnlp.py"

- name: copy modify certifi script
  ansible.windows.win_copy:
    src: files/modify_certifi.py
    dest: "{{ jenkins_node_path }}\\modify_certifi.py"

- name: modify certifi if needed
  ansible.windows.win_shell: python {{ jenkins_node_path }}\\modify_certifi.py "{{ jenkins_node_master_url }}" "{{ jenkins_node_master_ca_cert }}"

- name: copy agent script
  ansible.windows.win_template:
    src: templates/agent.cmd
    dest: "{{ jenkins_node_path }}\\agent.cmd"
  # This will always show as changed since the agent.cmd file is modified by the create_jenkins_node_jnlp.py script.

- name: add the node config to the jenkins master
  # To run this script, the user provided has to have Administrator rights in the Jenkins instance because it runs the Script Console.
  # See https://support.cloudbees.com/hc/en-us/articles/222520647-How-to-find-slave-secret-key-
  ansible.windows.win_shell: python {{ jenkins_node_path }}/create_jenkins_node_jnlp.py "{{ jenkins_node_master_url }}" "{{ jenkins_node_master_user }}" "{{ jenkins_node_master_password }}" "{{ jenkins_node_name }}" "{{ jenkins_node_description }}" "{{ jenkins_node_labels }}" "{{ jenkins_node_path }}\\agent.cmd" "--num-executors={{ jenkins_node_executors }}" "--path={{ jenkins_node_path }}" --verbose
  # As of 2017-10-2, Ansible doesn't keep track what values were vaulted. Without no_log, an error would
  # cause the command to be displayed, which is not desirable.
  # 2019-12-02: You have two options. Use 'no_log: yes' or use a Jenkins credential object so Jenkins masks the output. I have opted for Jenkins to mask the output
  # as this is a command that fails often, and I'm tired of having to run the command by hand and removing no_log so I can see the output.

- name: create a scheduled task to start the connection to the master
  # Create a Scheduled Task that runs on boot, which runs agent.cmd.
  community.windows.win_scheduled_task:
    name: Jenkins JNLP
    description: start the JNLP connectio to the Jenkins master
    actions:
    - path: cmd.exe
      arguments: /c agent.cmd
      working_directory: "{{ jenkins_node_path }}"
    triggers:
    - type: boot
    - type: time
      repetition:
        interval: "P0Y0M0DT0H5M0S"
      start_boundary: "2020-04-01T09:00:00"
    username: "{{ jenkins_node_user_name }}"
    password: "{{ jenkins_node_user_password }}"
    update_password: no
    logon_type: password
    run_level: highest
    execution_time_limit: PT0S            # infinite
    restart_interval: PT5M                # every 5 minutes
    restart_count: 288                    # interval * count = 1 day
    multiple_instances: 2                 # will not start a new instance if another is running
    run_only_if_network_available: no     # run whether network is available or not.
    disallow_start_if_on_batteries: no    # run whether on batteries or not.
    stop_if_going_on_batteries: no        # keep running, don't stop.
    wake_to_run: yes                      # get it going!
    start_when_available: yes             # run ASAP
    enabled: yes

- name: restart the scheduled task when a new agent is downloaded
  block:
    - name: stop the scheduled task
      ansible.windows.win_shell: schtasks /End /TN "Jenkins JNLP"

    - name: wait till the task has stopped
      community.windows.win_scheduled_task_stat:
        name: "Jenkins JNLP"
      register: jenkins_node_jnlp_win_task_stat_stop
      until: jenkins_node_jnlp_win_task_stat_stop.state is defined and jenkins_node_jnlp_win_task_stat_stop.state.status == "TASK_STATE_READY"
      retries: 10
      delay: 5
  when: result_download_agent_jar.changed

- name: wait 5 seconds
  ansible.builtin.wait_for:
    timeout: 5
  delegate_to: localhost

- name: check the status of the task
  community.windows.win_scheduled_task_stat:
    name: "Jenkins JNLP"
  register: jenkins_node_jnlp_win_task_status

- name: start and wait 10 for the scheduled task
  block:
    - name: start the task
      ansible.windows.win_shell: schtasks /Run /TN "Jenkins JNLP"

    - name: wait 5 seconds
      ansible.builtin.wait_for:
        timeout: 5
      delegate_to: localhost
  when: jenkins_node_jnlp_win_task_status.state is defined and jenkins_node_jnlp_win_task_status.state.status != "TASK_STATE_RUNNING"

- name: wait till the task has for sure started
  community.windows.win_scheduled_task_stat:
    name: "Jenkins JNLP"
  register: jenkins_node_jnlp_win_task_stat_start
  until: jenkins_node_jnlp_win_task_stat_start.state is defined and jenkins_node_jnlp_win_task_stat_start.state.status == "TASK_STATE_RUNNING"
  retries: 10
  delay: 5

- name: copy node verify script
  ansible.windows.win_copy:
    src: files/verify_jenkins_node_jnlp.py
    dest: "{{ jenkins_node_path }}\\verify_jenkins_node_jnlp.py"

- name: verify that the node is connected
  ansible.windows.win_shell: python {{ jenkins_node_path }}\\verify_jenkins_node_jnlp.py "{{ jenkins_node_master_url }}" "{{ jenkins_node_master_user }}" "{{ jenkins_node_master_password }}" "{{ jenkins_node_name }}" "Jenkins JNLP"
  # 2019-12-02: You have two options. Use 'no_log: yes' or use a Jenkins credential object so Jenkins masks the output. I have opted for Jenkins to mask the output
  # as this is a command that fails often, and I'm tired of having to run the command by hand and removing no_log so I can see the output.
